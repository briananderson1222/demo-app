on: workflow_call

inputs:
  github_token:
    required: true
  tf_working_dir:
    required: false
    default: .

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
    - name: Terraform fmt
      id: fmt
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: terraform fmt -check
      continue-on-error: true
  
    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: terraform init
  
    - name: Terraform Validate
      id: validate
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: terraform validate -no-color
  
    - name: Terraform Plan
      id: plan
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: terraform plan -input=false -no-color -out plan.json
      continue-on-error: true
  
    - name: Upload plan artifact
      uses: actions/upload-artifact@v2
      with:
        name: Terraform Plan
        path: ${{ inputs.tf_working_dir }}
        pattern: plan.json
  
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
  
          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
  
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
  
          </details>
  
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
          <details><summary>Show Plan</summary>
  
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
  
          </details>
  
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.tf_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
  
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
