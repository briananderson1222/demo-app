name: Demo CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

env:
  GCP_PROJECT_ID: brian-dev-1222
  GCP_REGION: us-central1
  K8S_CLUSTER: autopilot-cluster-1
  K8S_MANIFEST: manifest.yaml
  K8S_DEPLOYMENT_NAME: "demo-app-deployment"

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: build 
        uses: ./.github/actions/gradle-build

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - id: analyze 
        uses: ./.github/actions/gradle-sonar
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: analyze
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker-push
        with:
          google_application_credentials: ${{ secrets.GCP_CREDENTIALS }}
          gcp_project_id: ${{ env.GCP_PROJECT_ID }}
          artifact_name: demo-app

  deploy_to_dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: publish
    outputs:
      app_url: ${{ steps.deploy-dev.outputs.app_url }}
    steps:
      - uses: actions/checkout@v4
      - id: deploy-dev
        uses: ./.github/actions/k8s-apply
        with:
          google_application_credentials: ${{ secrets.GCP_CREDENTIALS }}
          gcp_project_id: ${{ env.GCP_PROJECT_ID }}
          gcp_region: ${{ env.GCP_REGION }}
          cluster_name: ${{ env.K8S_CLUSTER }}
          cluster_namespace: development
          k8s_manifest: ${{ env.K8S_MANIFEST }}
          deployment_name: ${{ env.K8S_DEPLOYMENT_NAME }}

  smoke_dev:
    name: Smoke Test Dev
    runs-on: ubuntu-latest
    needs: deploy_to_dev
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/smoke-test
        with: 
          application_url: ${{ needs.deploy_to_dev.outputs.app_url }}

  rollback_dev:
    name: Rollback Dev
    runs-on: ubuntu-latest
    needs: smoke_dev
    if: ${{ needs.smoke_dev.status == 'failure' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/k8s-undo-deployment
        with: 
          google_application_credentials: ${{ secrets.GCP_CREDENTIALS }}
          gcp_project_id: ${{ env.GCP_PROJECT_ID }}
          gcp_region: ${{ env.GCP_REGION }}
          cluster_name: ${{ env.K8S_CLUSTER }}
          cluster_namespace: development
          deployment_name: ${{ env.K8S_DEPLOYMENT_NAME }}

  deploy_to_prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: smoke_dev
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/k8s-apply
        with:
          google_application_credentials: ${{ secrets.GCP_CREDENTIALS }}
          gcp_project_id: ${{ env.GCP_PROJECT_ID }}
          gcp_region: ${{ env.GCP_REGION }}
          cluster_name: ${{ env.K8S_CLUSTER }}
          cluster_namespace: production
          k8s_manifest: ${{ env.K8S_MANIFEST }}
          deployment_name: ${{ env.K8S_DEPLOYMENT_NAME }}

  smoke_prod:
    name: Smoke Test Prod
    runs-on: ubuntu-latest
    needs: deploy_to_prod
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/smoke-test
        with: 
          application_url: ${{ needs.deploy_to_prod.app_url }}

  rollback_prod:
    name: Rollback Prod
    runs-on: ubuntu-latest
    needs: smoke_prod
    if: ${{ needs.smoke_prod.status == 'failure' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/k8s-undo-deployment
        with: 
          google_application_credentials: ${{ secrets.GCP_CREDENTIALS }}
          gcp_project_id: ${{ env.GCP_PROJECT_ID }}
          gcp_region: ${{ env.GCP_REGION }}
          cluster_name: ${{ env.K8S_CLUSTER }}
          cluster_namespace: production
          deployment_name: ${{ env.K8S_DEPLOYMENT_NAME }}
